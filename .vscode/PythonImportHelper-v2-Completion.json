[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "model.user",
        "description": "model.user",
        "isExtraImport": true,
        "detail": "model.user",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UserModel1",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "UserModel2",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "UserModel3",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "body_fields.main",
        "description": "body_fields.main",
        "peekOfCode": "class User(BaseModel):\n    name: str | None\n    username: str\n    bio: str | None = Field(\n        title=\"User bio description\",\n        max_length=4000\n    )\n    salary: float = Field(\n        ge=1000\n    )",
        "detail": "body_fields.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "body_fields.main",
        "description": "body_fields.main",
        "peekOfCode": "app = FastAPI()\nclass User(BaseModel):\n    name: str | None\n    username: str\n    bio: str | None = Field(\n        title=\"User bio description\",\n        max_length=4000\n    )\n    salary: float = Field(\n        ge=1000",
        "detail": "body_fields.main",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "body_multiple_params.main",
        "description": "body_multiple_params.main",
        "peekOfCode": "class User(BaseModel):\n  name: str | None = None\n  username: str\n  password: str\n  age: int | None = 20\n@app.put(\"/{id}\", tags=[\"update user\"])\nasync def update_user(\n  id: Annotated[int, Path(title=\"user id\", le=100, ge=0)],\n  query: Annotated[str | None, Query(title=\"search query\")] = None,\n  user: User | None = None):",
        "detail": "body_multiple_params.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "body_multiple_params.main",
        "description": "body_multiple_params.main",
        "peekOfCode": "app = FastAPI()\nclass User(BaseModel):\n  name: str | None = None\n  username: str\n  password: str\n  age: int | None = 20\n@app.put(\"/{id}\", tags=[\"update user\"])\nasync def update_user(\n  id: Annotated[int, Path(title=\"user id\", le=100, ge=0)],\n  query: Annotated[str | None, Query(title=\"search query\")] = None,",
        "detail": "body_multiple_params.main",
        "documentation": {}
    },
    {
        "label": "Relation",
        "kind": 6,
        "importPath": "body_nested_model.model.user",
        "description": "body_nested_model.model.user",
        "peekOfCode": "class Relation(Enum):\n    FATHER = \"father\"\n    MOTHER = \"mother\"\nclass Parents(BaseModel):\n    full_name: str | None\n    relation: Relation | None = Relation.MOTHER\nclass UserModel(BaseModel):\n    name: str\n    username: str\n    password: str",
        "detail": "body_nested_model.model.user",
        "documentation": {}
    },
    {
        "label": "Parents",
        "kind": 6,
        "importPath": "body_nested_model.model.user",
        "description": "body_nested_model.model.user",
        "peekOfCode": "class Parents(BaseModel):\n    full_name: str | None\n    relation: Relation | None = Relation.MOTHER\nclass UserModel(BaseModel):\n    name: str\n    username: str\n    password: str\n    # skills: set[str] = set()  # it will just give us a unique item\n    reference: Parents",
        "detail": "body_nested_model.model.user",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "body_nested_model.model.user",
        "description": "body_nested_model.model.user",
        "peekOfCode": "class UserModel(BaseModel):\n    name: str\n    username: str\n    password: str\n    # skills: set[str] = set()  # it will just give us a unique item\n    reference: Parents",
        "detail": "body_nested_model.model.user",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "body_nested_model.main",
        "description": "body_nested_model.main",
        "peekOfCode": "app = FastAPI()\n@app.put(\"/\", tags=[\"update profile\"])\nasync def update_user(request_body: UserModel):\n    encoded = jsonable_encoder(request_body)\n    print(encoded)\n    return JSONResponse(content=encoded, status_code=200)\n@app.get(\"/\", tags=[\"Health\"])\nasync def root_route():\n    return {\"Hello\": \"Hello World\"}",
        "detail": "body_nested_model.main",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "crash_course.class",
        "description": "crash_course.class",
        "peekOfCode": "class Animal:\n    name = \"dog\"\n    color = \"black\"\nobj1 = Animal()\nclass Person:\n    def __init__(self, name: str, age: int) -> None:\n        self.name = name\n        self.age = age\n    def about(self) -> str:\n        return f\"Name is: {self.name} and age is: {self.age}\"",
        "detail": "crash_course.class",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "crash_course.class",
        "description": "crash_course.class",
        "peekOfCode": "class Person:\n    def __init__(self, name: str, age: int) -> None:\n        self.name = name\n        self.age = age\n    def about(self) -> str:\n        return f\"Name is: {self.name} and age is: {self.age}\"\nobj = Person(\"Sabbir\", 19)\nprint(obj.about())",
        "detail": "crash_course.class",
        "documentation": {}
    },
    {
        "label": "obj1",
        "kind": 5,
        "importPath": "crash_course.class",
        "description": "crash_course.class",
        "peekOfCode": "obj1 = Animal()\nclass Person:\n    def __init__(self, name: str, age: int) -> None:\n        self.name = name\n        self.age = age\n    def about(self) -> str:\n        return f\"Name is: {self.name} and age is: {self.age}\"\nobj = Person(\"Sabbir\", 19)\nprint(obj.about())",
        "detail": "crash_course.class",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "crash_course.class",
        "description": "crash_course.class",
        "peekOfCode": "obj = Person(\"Sabbir\", 19)\nprint(obj.about())",
        "detail": "crash_course.class",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "crash_course.for_loop",
        "description": "crash_course.for_loop",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)",
        "detail": "crash_course.for_loop",
        "documentation": {}
    },
    {
        "label": "get_name",
        "kind": 2,
        "importPath": "crash_course.funtion",
        "description": "crash_course.funtion",
        "peekOfCode": "def get_name(name, age):\n    print(f\"Hello {name.title()}, age is {age}\")\n    # return f\"Hello {name.title()}\"\nget_name(\"sabbir\", 19)",
        "detail": "crash_course.funtion",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "crash_course.if_conditions",
        "description": "crash_course.if_conditions",
        "peekOfCode": "a = 200\nb = 33\nc = 500\nif a > b or c > a:\n    print(\"Both conditions are True\")",
        "detail": "crash_course.if_conditions",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "crash_course.if_conditions",
        "description": "crash_course.if_conditions",
        "peekOfCode": "b = 33\nc = 500\nif a > b or c > a:\n    print(\"Both conditions are True\")",
        "detail": "crash_course.if_conditions",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "crash_course.if_conditions",
        "description": "crash_course.if_conditions",
        "peekOfCode": "c = 500\nif a > b or c > a:\n    print(\"Both conditions are True\")",
        "detail": "crash_course.if_conditions",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "crash_course.inheritance",
        "description": "crash_course.inheritance",
        "peekOfCode": "class Person:\n    def __init__(self, fname: str, lname: str) -> None:\n        self.firstname = fname\n        self.lastname = lname\nclass Student(Person):\n    def printname(self) -> None:\n        print(self.firstname, self.lastname)\nsabbir = Student(\"Sabbir\", \"Hossain\")\nsabbir.printname()\nrafi = Student(\"Raiful\", \"Islam\")",
        "detail": "crash_course.inheritance",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "crash_course.inheritance",
        "description": "crash_course.inheritance",
        "peekOfCode": "class Student(Person):\n    def printname(self) -> None:\n        print(self.firstname, self.lastname)\nsabbir = Student(\"Sabbir\", \"Hossain\")\nsabbir.printname()\nrafi = Student(\"Raiful\", \"Islam\")\nrafi.printname()",
        "detail": "crash_course.inheritance",
        "documentation": {}
    },
    {
        "label": "sabbir",
        "kind": 5,
        "importPath": "crash_course.inheritance",
        "description": "crash_course.inheritance",
        "peekOfCode": "sabbir = Student(\"Sabbir\", \"Hossain\")\nsabbir.printname()\nrafi = Student(\"Raiful\", \"Islam\")\nrafi.printname()",
        "detail": "crash_course.inheritance",
        "documentation": {}
    },
    {
        "label": "rafi",
        "kind": 5,
        "importPath": "crash_course.inheritance",
        "description": "crash_course.inheritance",
        "peekOfCode": "rafi = Student(\"Raiful\", \"Islam\")\nrafi.printname()",
        "detail": "crash_course.inheritance",
        "documentation": {}
    },
    {
        "label": "adult",
        "kind": 2,
        "importPath": "crash_course.try_except",
        "description": "crash_course.try_except",
        "peekOfCode": "def adult(something):\n    try:\n        print(\"Age is \" + something)\n    except:\n        print(\"Fail to concat\")\n    finally:\n        print(\"Evething is fine.\")\nadult(20)",
        "detail": "crash_course.try_except",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "crash_course.varibale_datatype",
        "description": "crash_course.varibale_datatype",
        "peekOfCode": "name = \"Sabbir\"  # string\nfndName = 'Rafi'  # string str\nprint(type(name))  # output: str\nprint(fndName)\n\"\"\"\nNumber Data Type\n\"\"\"\nage = 20\nprint(age)\n\"\"\"",
        "detail": "crash_course.varibale_datatype",
        "documentation": {}
    },
    {
        "label": "fndName",
        "kind": 5,
        "importPath": "crash_course.varibale_datatype",
        "description": "crash_course.varibale_datatype",
        "peekOfCode": "fndName = 'Rafi'  # string str\nprint(type(name))  # output: str\nprint(fndName)\n\"\"\"\nNumber Data Type\n\"\"\"\nage = 20\nprint(age)\n\"\"\"\nlist Data Type",
        "detail": "crash_course.varibale_datatype",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "crash_course.varibale_datatype",
        "description": "crash_course.varibale_datatype",
        "peekOfCode": "age = 20\nprint(age)\n\"\"\"\nlist Data Type\n\"\"\"\nrolls = [20, 30, 40, 50]  # list\nprint(rolls)\n\"\"\"\ndict Data Type\n\"\"\"",
        "detail": "crash_course.varibale_datatype",
        "documentation": {}
    },
    {
        "label": "rolls",
        "kind": 5,
        "importPath": "crash_course.varibale_datatype",
        "description": "crash_course.varibale_datatype",
        "peekOfCode": "rolls = [20, 30, 40, 50]  # list\nprint(rolls)\n\"\"\"\ndict Data Type\n\"\"\"\nfnds = {\"Tahsin\", \"Rafi\", \"Tanvir\", \"Ankon\"}\nprint(fnds)\n\"\"\"\nBool Data Type\n\"\"\"",
        "detail": "crash_course.varibale_datatype",
        "documentation": {}
    },
    {
        "label": "fnds",
        "kind": 5,
        "importPath": "crash_course.varibale_datatype",
        "description": "crash_course.varibale_datatype",
        "peekOfCode": "fnds = {\"Tahsin\", \"Rafi\", \"Tanvir\", \"Ankon\"}\nprint(fnds)\n\"\"\"\nBool Data Type\n\"\"\"\nisOpen = False | True\nprint(isOpen)",
        "detail": "crash_course.varibale_datatype",
        "documentation": {}
    },
    {
        "label": "isOpen",
        "kind": 5,
        "importPath": "crash_course.varibale_datatype",
        "description": "crash_course.varibale_datatype",
        "peekOfCode": "isOpen = False | True\nprint(isOpen)",
        "detail": "crash_course.varibale_datatype",
        "documentation": {}
    },
    {
        "label": "starting_point",
        "kind": 5,
        "importPath": "crash_course.while",
        "description": "crash_course.while",
        "peekOfCode": "starting_point = 1\nwhile starting_point < 10:\n    print(starting_point)\n    starting_point += 1\n    # starting_point = starting_point + 1\nindex = 1\nwhile True:\n    print(index)\n    index += 1\n    if index == 10:",
        "detail": "crash_course.while",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "crash_course.while",
        "description": "crash_course.while",
        "peekOfCode": "index = 1\nwhile True:\n    print(index)\n    index += 1\n    if index == 10:\n        break",
        "detail": "crash_course.while",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 6,
        "importPath": "extra_data_types.main",
        "description": "extra_data_types.main",
        "peekOfCode": "class model(BaseModel):\n    uuid: str = uuid4()\n    start: datetime | None\n    end: datetime | None\n    repeat: time | None\n    proced: timedelta | None\n@app.put(\"/\", tags=[\"routes\"])\ndef routes(requestModel: Annotated[model, Body()]):\n    # print(requestModel)\n    start_process = requestModel.start + requestModel.proced",
        "detail": "extra_data_types.main",
        "documentation": {}
    },
    {
        "label": "routes",
        "kind": 2,
        "importPath": "extra_data_types.main",
        "description": "extra_data_types.main",
        "peekOfCode": "def routes(requestModel: Annotated[model, Body()]):\n    # print(requestModel)\n    start_process = requestModel.start + requestModel.proced\n    duration = requestModel.end - start_process\n    print(duration)\n    pass",
        "detail": "extra_data_types.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "extra_data_types.main",
        "description": "extra_data_types.main",
        "peekOfCode": "app = FastAPI()\nclass model(BaseModel):\n    uuid: str = uuid4()\n    start: datetime | None\n    end: datetime | None\n    repeat: time | None\n    proced: timedelta | None\n@app.put(\"/\", tags=[\"routes\"])\ndef routes(requestModel: Annotated[model, Body()]):\n    # print(requestModel)",
        "detail": "extra_data_types.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "fastapi_hello.main",
        "description": "fastapi_hello.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\nasync def root():\n    return {\n        \"message\": \"Hello world\"\n    }\n# http://localhost:5000/user\n@app.get(\"/user\")\nasync def user():\n    return {",
        "detail": "fastapi_hello.main",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "path_params.main",
        "description": "path_params.main",
        "peekOfCode": "class Role(str, Enum):\n    ADMIN = \"ADMIN\"\n    USER = \"USER\"\n@app.get(\"/user/{role}\")\nasync def user(role:Role):\n    if role is role.ADMIN:\n        return JSONResponse(status_code=200, content={\n            \"message\":\"You are a admin\"\n        })\n    else:",
        "detail": "path_params.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "path_params.main",
        "description": "path_params.main",
        "peekOfCode": "app = FastAPI()\nclass Role(str, Enum):\n    ADMIN = \"ADMIN\"\n    USER = \"USER\"\n@app.get(\"/user/{role}\")\nasync def user(role:Role):\n    if role is role.ADMIN:\n        return JSONResponse(status_code=200, content={\n            \"message\":\"You are a admin\"\n        })",
        "detail": "path_params.main",
        "documentation": {}
    },
    {
        "label": "getProduct",
        "kind": 2,
        "importPath": "path_validations.main",
        "description": "path_validations.main",
        "peekOfCode": "def getProduct(product_id: int):\n    print(product_id)\n    return {\"hello\"}\n@app.get(\"/products/{product_id}\", tags=[\"Get single product\"])\ndef getProduct(product_id: int):\n    print(product_id)\n    return {\"hello\"}\n@app.get(\"/users/{id}\", tags=[\"get single user\"])\nasync def getUser(id: Annotated[int, Path(title=\"user id\")]):\n    print(id)",
        "detail": "path_validations.main",
        "documentation": {}
    },
    {
        "label": "getProduct",
        "kind": 2,
        "importPath": "path_validations.main",
        "description": "path_validations.main",
        "peekOfCode": "def getProduct(product_id: int):\n    print(product_id)\n    return {\"hello\"}\n@app.get(\"/users/{id}\", tags=[\"get single user\"])\nasync def getUser(id: Annotated[int, Path(title=\"user id\")]):\n    print(id)\n    result = {\n        \"id\": 1\n    }\n    if id:",
        "detail": "path_validations.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "path_validations.main",
        "description": "path_validations.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/products/{product_id}\", tags=[\"Get single product\"])\ndef getProduct(product_id: int):\n    print(product_id)\n    return {\"hello\"}\n@app.get(\"/products/{product_id}\", tags=[\"Get single product\"])\ndef getProduct(product_id: int):\n    print(product_id)\n    return {\"hello\"}\n@app.get(\"/users/{id}\", tags=[\"get single user\"])",
        "detail": "path_validations.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "query_params.main",
        "description": "query_params.main",
        "peekOfCode": "app = FastAPI()\nfake_items_db:list[dict[str, str]]= [{\"item_name\": \"1\"}, {\"item_name\": \"2\"}, {\"item_name\": \"3\"}]\n@app.get(\"/\")\nasync def index(skip:int = 0, limit:int = 10):\n    item = fake_items_db[skip:skip + limit]\n    return [item]",
        "detail": "query_params.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "query_validations.main",
        "description": "query_validations.main",
        "peekOfCode": "app = FastAPI()\nfake_data: dict[str, list[dict[int, str]]] = {\n    \"items\": [\n        {1: \"Apple\"},\n        {2: \"Banana\"}\n    ]\n}\n# @app.get(\"/items\", tags=[\"Items\"])\n# async def get_item(q: str | None = None):\n#     print(q)",
        "detail": "query_validations.main",
        "documentation": {}
    },
    {
        "label": "UserModel1",
        "kind": 6,
        "importPath": "request_example.models.user",
        "description": "request_example.models.user",
        "peekOfCode": "class UserModel1(BaseModel):\n    name: str | None\nclass UserModel2(BaseModel):\n    name: str | None = Field(examples=[\"Sabbir Hossain Shuvo\"])\nclass UserModel3(BaseModel):\n    name: str | None\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {",
        "detail": "request_example.models.user",
        "documentation": {}
    },
    {
        "label": "UserModel2",
        "kind": 6,
        "importPath": "request_example.models.user",
        "description": "request_example.models.user",
        "peekOfCode": "class UserModel2(BaseModel):\n    name: str | None = Field(examples=[\"Sabbir Hossain Shuvo\"])\nclass UserModel3(BaseModel):\n    name: str | None\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Fucker boy\"\n                }",
        "detail": "request_example.models.user",
        "documentation": {}
    },
    {
        "label": "UserModel3",
        "kind": 6,
        "importPath": "request_example.models.user",
        "description": "request_example.models.user",
        "peekOfCode": "class UserModel3(BaseModel):\n    name: str | None\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Fucker boy\"\n                }\n            ]\n        }",
        "detail": "request_example.models.user",
        "documentation": {}
    },
    {
        "label": "root_routes",
        "kind": 2,
        "importPath": "request_example.main",
        "description": "request_example.main",
        "peekOfCode": "def root_routes():\n    return {\"hello\": \"world\"}\n@app.put(\"/1\", tags=['update user 1'])\ndef update_user(request_body: Annotated[UserModel1, Body(example={\n    \"name\": \"sabbir\"\n})]):\n    print(request_body)\n    pass\n@app.put(\"/2\", tags=['update user 2'])\ndef update_user2(request_body: Annotated[UserModel2, Body()]):",
        "detail": "request_example.main",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "request_example.main",
        "description": "request_example.main",
        "peekOfCode": "def update_user(request_body: Annotated[UserModel1, Body(example={\n    \"name\": \"sabbir\"\n})]):\n    print(request_body)\n    pass\n@app.put(\"/2\", tags=['update user 2'])\ndef update_user2(request_body: Annotated[UserModel2, Body()]):\n    print(request_body)\n    pass\n@app.put(\"/3\", tags=['update user 3'])",
        "detail": "request_example.main",
        "documentation": {}
    },
    {
        "label": "update_user2",
        "kind": 2,
        "importPath": "request_example.main",
        "description": "request_example.main",
        "peekOfCode": "def update_user2(request_body: Annotated[UserModel2, Body()]):\n    print(request_body)\n    pass\n@app.put(\"/3\", tags=['update user 3'])\ndef update_user3(request_body: Annotated[UserModel3, Body()]):\n    print(request_body)\n    pass",
        "detail": "request_example.main",
        "documentation": {}
    },
    {
        "label": "update_user3",
        "kind": 2,
        "importPath": "request_example.main",
        "description": "request_example.main",
        "peekOfCode": "def update_user3(request_body: Annotated[UserModel3, Body()]):\n    print(request_body)\n    pass",
        "detail": "request_example.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "request_example.main",
        "description": "request_example.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\", tags=[\"root route for hello world\"])\ndef root_routes():\n    return {\"hello\": \"world\"}\n@app.put(\"/1\", tags=['update user 1'])\ndef update_user(request_body: Annotated[UserModel1, Body(example={\n    \"name\": \"sabbir\"\n})]):\n    print(request_body)\n    pass",
        "detail": "request_example.main",
        "documentation": {}
    }
]